{"version":3,"sources":["components/header/Header.tsx","layout/Layout.tsx","utils/random.tsx","components/getPeople/divPeople.tsx","components/getPeople/votes.tsx","components/getPeople/divMocks.tsx","utils/config.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","Layout","children","getRandomArbitrary","min","max","Math","floor","random","GetValue","props","useState","qty","value","MyMocks","id","image","name","species","votes","age","names","split","firstName","undefined","lastName","place","first","last","ageP","slogaP","votesP","src","alt","Votes","console","log","sum","map","x","text","Names","mocks","setMocks","useEffect","fetch","then","res","json","results","index","mock","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b29a1272.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Header.css';\n\nconst Header = () => {\n  return (\n    <header className='header'>\n    </header>\n  );\n};\n\nexport default Header;","import React from 'react';\nimport Header from '../components/header/Header';\n\nconst Layout = ({ children }: any) => {\n  return (\n    <>\n      <Header />\n      {children}\n    </>\n  );\n};\nexport default Layout;","const getRandomArbitrary = (min: number, max: number) => {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nexport default getRandomArbitrary;","import React, { useState, useEffect, ChangeEvent } from 'react';\nimport random from '../../utils/random'\n\nconst GetValue = (props: any) => {\n  const [value, setValue] = useState(props.qty) \n  function handleChange(event: ChangeEvent<HTMLInputElement>) {\n    setValue(event.target.value)\n  }\n  return (\n    <div className='peopleVotes'>{value}</div>\n  )\n}\n\nconst MyMocks = (props: any) => {\n  const { \n    id,\n    image, \n    name,\n    species,\n    votes,\n    age\n    } = props;\n  const names: any = name.split(' ')\n  const firstName: string = (names[0] !== undefined) ? names[0] : '' \n  const lastName: string = (names[1] !== undefined) ? names[1] : 'Desconocido' \n\n  const place: string = `Place = ${id}`\n  const first: string = `Name = ${firstName}`\n  const last: string = `Last name = ${lastName}`\n  const ageP: string = `Age =${age}`\n  const slogaP: string = `Slogan = ${species}`\n  const votesP: string = `Votes = ${votes}`\n\n  return (\n    <div className='people'>\n      <div className='img'>\n        <img className='peopleImg' src={image} alt='people image'/>\n      </div>\n      <div className='contentPeople'>\n        <div className=\"peopleId\">{place}</div>\n        <div className='peopleName'>{first}</div>\n        <div className='peopleLName'>{last}</div>\n        <div className='peopleAge'>{ageP}</div>\n        <div className='peopleSlogan'>{slogaP}</div>\n        <GetValue qty={votesP}/>\n      </div>\n    </div>\n  );\n};\n\nexport default MyMocks;","const Votes = (props: any) => {\n  console.log(props.value)\n  let sum: number = 0\n  props.value.map((x: { votes: number; }) => sum += x.votes)\n  const text: string = `Total de votos = ${sum}`\n  return <h1>{text}</h1>\n}\n\nexport default Votes;","import React, { useState, useEffect } from 'react';\nimport random from '../../utils/random'\nimport MyMocks from './divPeople';\nimport './people.css';\nimport { API } from '../../utils/config'\nimport Votes from './votes'\n\nconst Names = () => {\n  const [mocks, setMocks] = useState([]);\n\n  useEffect(() => {\n    const getMyChallenges = () => {\n      fetch(`${API}?page=${random(1,34)}`)\n        .then(res => res.json())\n        .then(res => {\n          console.log(res)\n          const { results } = res;\n          results.map((res: { votes: number; age: number; }, index: any) => {\n            res.votes = random(1 ,20)\n            res.age = random(18, 70)\n          })\n          setMocks(results);\n        });\n    };\n    getMyChallenges();\n  }, []);\n\n  return (\n    <div className=\"mocks\">\n      <div>\n        <h1 className=\"myMocks\">Votes</h1>\n        <button>Order</button>\n        <button>Desorder</button>\n        <button>Per Votes</button>\n        <Votes value={mocks} />\n      </div>\n      <div className='mocks-people'>\n\n        {mocks.map((mock, index) => (\n          <MyMocks key={index} {...mock} />\n        ))}\n      </div>\n      </div>\n    )\n}\n\nexport default Names;\n","export const API = \"https://rickandmortyapi.com/api/character/\";","import React, { FC } from 'react';\nimport Layout from './layout/Layout'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Names from './components/getPeople/divMocks'\nimport './App.css';\n\n\nconst App: FC = () => {\n  return (\n    <BrowserRouter>\n      <Layout>\n        <Switch>\n          <Route exact path='/lista-de-votaciones/' component={Names} />\n        </Switch>\n      </Layout>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}